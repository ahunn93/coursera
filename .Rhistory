COPD <- read.csv("COPD_student_dataset.csv")
view(COPD)
View(COPD)
hist(COPD$MWT1Best)
hist(COPD$MWT1Best, main = "Histogram of MWT1Best", xlab = "MWT1Best", breaks = 12)
plot(cars)
COPD <- read.csv("COPD_student_dataset.csv")
View(COPD)
hist(COPD$MWT1Best, main = "Histogram of MWT1Best", xlab = "MWT1Best", breaks = 12)
COPD <- read.csv("COPD_student_dataset.csv")
View(COPD)
hist(COPD$MWT1Best, main = "Histogram of MWT1Best", xlab = "MWT1Best", breaks = 12)
subset(COPD, MWT1Best > 650)
subset(COPD, MWT1Best > 650 | MWT1 < 150)
hist(COPD$FEV1, main = "Histogram of FEV1", xlab = "FEV1")
list("Summary" = summary(COPD$MWT1Best), "Mean" = mean(COPD$MWT1Best, na.rm = TRUE), "Standard Deviation" = sd(COPD$MWT1Best, na.rm = TRUE), "Range" = range(COPD$MWT1Best, na.rm = TRUE), "Inter-Quartile Range" = IQR(COPD$MWT1Best, na.rm = TRUE))
list("Summary" = summary(COPD$FEV1), "Mean" = mean(COPD$FEV1, na.rm = TRUE), "Standard Deviation" = sd(COPD$FEV1, na.rm = TRUE), "Range" = range(COPD$FEV1, na.rm = TRUE), "Inter-Quartile Range" = IQR(COPD$FEV1, na.rm = TRUE))
plot(COPD$FEV1, COPD$MWT1Best, xlab = "FEV1", ylab = "MWT1Best")
plot(COPD$FEV1, COPD$MWT1Best, xlab = "FEV1", ylab = "MWT1Best")
cor.test(COPD$FEV1, COPD$MWT1Best, use = "complete.obs", method = "pearson")
hist(COPD$AGE)
hist(COPD$AGE, main = "Histogram of Age", xlab = "Age")
hist(COPD$AGE, main = "Histogram of Age", xlab = "Age")
list("Summary" = summary(COPD$AGE), "Mean" = mean(COPD$AGE, na.rm = TRUE), "Standard Deviation" = sd(COPD$AGE, na.rm = TRUE), "Range" = range(COPD$AGE, na.rm = TRUE), "Inter-Quartile Range" = IQR(COPD$AGE, na.rm = TRUE))
dim(COPD)
dim(COPD)
dim(COPD)
head(COPD)
class(COPD$AGE)
summary(COPD$AGE)
hist(COPD$AGE)
table(COPD$COPDSEVERITY, exclude = NULL)
class(COPD$COPDSEVERITY)
class(COPD$COPDSEVERITY)
table(COPD$COPDSEVERITY, exclude = NULL)
class(COPD$gender)
COPD$gender <- as.factor(COPD$gender)
class(COPD$gender)
table(COPD$gender)
class(COPD$MWT1Best)
class(COPD$copd)
class(COPD$MWT1Best)
class(COPD$MWT1Best)
class(COPD$MWT1Best)
class(COPD$copd)
COPD$copd <- as.factor(COPD$copd)
class(COPD$copd)
str(COPD$copd)
lr1 <- lm(MWT1Best ~ copd, data=COPD) #Runs linear regression for **MWT1Best = $\alpha$ + $\beta$copd**
summary(lr1) #View the output of the regression
COPD$copd <- relevel(COPD$copd, ref = 3) #Changes the reference level to severity level 3
lr1 <- lm(MWT1Best ~ copd, data = COPD) #Re-runs the model using the new reference category
summary(lr1) #View the output of the new regression
#Check the class of all variables
class(COPD$Diabetes)
class(COPD$muscular)
class(COPD$hypertension)
class(COPD$AtrialFib)
class(COPD$IHD)
#Check the class of all variables
class(COPD$Diabetes)
class(COPD$muscular)
class(COPD$hypertension)
class(COPD$AtrialFib)
class(COPD$IHD)
#All are currently integers, so change to factor and verify
COPD$Diabetes <- as.factor(COPD$Diabetes)
COPD$muscular <- as.factor(COPD$muscular)
COPD$hypertension <- as.factor(COPD$hypertension)
COPD$AtrialFib <- as.factor(COPD$AtrialFib)
COPD$IHD <- as.factor(COPD$IHD)
class(COPD$Diabetes)
class(COPD$muscular)
class(COPD$hypertension)
class(COPD$AtrialFib)
class(COPD$IHD)
#Create vector with length of Diabetes
comorbid <- length(COPD$Diabetes)
#Assign a value of 1 in the comorbid vector if the variable if at least one of the conditions is present.
comorbid[COPD$Diabetes == 1 | COPD$muscular == 1 | COPD$hypertension == 1 | COPD$AtrialFib == 1 | COPD$IHD == 1] <- 1
#Assign a vlaue of 0 for any NA values in the vector
comorbid[is.na(comorbid)] <- 0
#Convert comorbid to a factor vector
comorbid <- as.factor(comorbid)
print(comorbid)
str(comorbid)
comorbid[15] #Looks at the 15th value in the vector
COPD$comorbid <- comorbid
describe(COPD)
install.packages("Hmisc")
library(Hmisc)
my_data <- COPD[,c("AGE", "PackHistory","FEV1", "FEV1PRED", "FVC", "CAT", "HAD", "SGRQ")] #Creates a new vector including the variables to be analyzed
cor_matrix <- cor(my_data) #Create a correlation matrix of the variables that are to be analyzed
cor_matrix #View the correlation matrix
round(cor_matrix, 2) #Rounds the values of the matrix to 2 decimal places
pairs(~AGE+PackHistory+FEV1+FEV1PRED+FVC+CAT+HAD+SGRD, data = COPD)
pairs(~AGE+PackHistory+FEV1+FEV1PRED+FVC+CAT+HAD+SGRQ, data = COPD)
install.packages("gmodels")
library(gmodels)
CrossTable(COPD$hypertension, COPD$IHD)
lr2 <- lm(MWT1Best ~ FEV1 + AGE + gender + COPDSeverity + comorbid, data = COPD)
lr2 <- lm(MWT1Best ~ FEV1 + AGE + gender + COPDSEVERITY + comorbid, data = COPD)
confint(lr2)
summary(lr2)
COPD$Diabetes <- c(0,1)[as.integer(COPD$Diabetes)]
COPD$AtrialFib <- c(0,1)[as.integer(COPD$AtrialFib)]
DAF <- COPD$Diabetes * COPD$AtrialFib
?factor()
r1 <- lm(MWT1Best ~ factor(Diabetes) + factor(AtrialFib) + factor(DAF), data = COPD)
summary(r1)
confint(r1)
install.packages("prediction")
library(prediction)
library(prediction)
list("Diabetes" = prediction(r2, at = list(Diabetes = c(0,1))),
"AtrialFib" = prediction(r2, at = list(AtrialFib = c(0,1,))),
"Diabetes*AtrialFib" = prediction(r2, at = list(Diabetes = c(0,1), AtrialFib = c(0,1))))
library(prediction)
list("Diabetes" = prediction(r1, at = list(Diabetes = c(0,1))),
"AtrialFib" = prediction(r1, at = list(AtrialFib = c(0,1,))),
"Diabetes*AtrialFib" = prediction(r1, at = list(Diabetes = c(0,1), AtrialFib = c(0,1))))
library(prediction)
r2 <- lm(MWT1Best ~ factor(Diabetes) + factor(AtrialFib) + factor(Diabetes*AtrialFib), data = COPD)
list("Diabetes" = prediction(r2, at = list(Diabetes = c(0,1))),
"AtrialFib" = prediction(r2, at = list(AtrialFib = c(0,1,))),
"Diabetes*AtrialFib" = prediction(r2, at = list(Diabetes = c(0,1), AtrialFib = c(0,1))))
library(prediction)
r2 <- lm(MWT1Best ~ factor(Diabetes) + factor(AtrialFib) + factor(Diabetes*AtrialFib), data = COPD)
list("Diabetes" = prediction(r2, at = list(Diabetes = c(0,1))),
"AtrialFib" = prediction(r2, at = list(AtrialFib = c(0,1))),
"Diabetes*AtrialFib" = prediction(r2, at = list(Diabetes = c(0,1), AtrialFib = c(0,1))))
install.packages("installr")
library(installr)
updater()
updater()
data <- read.csv("diabetes.csv", header = TRUE, sep = ",")
dim(g) #check that the import worked properly (this will give the number of rows then the number of columns)
data <- read.csv("diabetes.csv", header = TRUE, sep = ",")
dim(data) #check that the import worked properly (this will give the number of rows then the number of columns)
colnames():[1] 403 23
data <- read.csv("diabetes.csv", header = TRUE, sep = ",")
dim(data) #check that the import worked properly (this will give the number of rows then the number of columns)
colnames(data):[1] 403 23
data <- read.csv("diabetes.csv", header = TRUE, sep = ",")
dim(data) #check that the import worked properly (this will give the number of rows then the number of columns)
colnames(data)
data <- read.csv("diabetes.csv", header = TRUE, sep = ",")
dim(data) #check that the import worked properly (this will give the number of rows then the number of columns)
colnames(data) #gives us the column names read into the data
chol <- data["chol"] #continuous variable
gender <- as.factor(data[,"gender"]) #categorical variable
dm <- as.factor(data[,"dm"])
gt <- table(gender) #stores the tabulation for further manipulation
addmargins(gt) #adds margins summing up the totals and printing the results
round(prop.table(gt), digits = 3) #proportions rounded to the third decimal place
round(prop.table(gt), digits = 3) #proportions rounded to the third decimal place
round(100*prop.table(gt), digits = 1) #make it even easier with percentages rounded to first decimal place
dm2 <- factor(dm, exclude = NULL) #create a new factor from the old
table(dm2) #displays the counts including the missings (NAs)
dm2
dm2 <- factor(dm, exclude = NULL) #create a new factor from the old
table(dm2) #displays the counts including the missings (NAs)
summary (chol)
height <- data[,"height"]
weight <- data[,"weight"]
summary(height)
summary(weight)
height.si <- height*0.0254
weight.si <- weight*0.453592
bmi <- weight.si/height.si^2
summary(bmi)
bmi_cat <- ifelse(bmi < 18.5, "underweight",
ifelse(bmi >= 18.5 & bmi <= 25, "normal",
ifelse(bmi > 25 & bmi <= 30, "overweight",
ifelse(bmi > 30, "obese", NA))))
table(bmi_cat, exclude = NULL) #verify the categorization worked appropriately and include NAs
dm_by_bmi_cat <- table(bmi_cat, dm2, exclude = NULL) #frequencies of diabetes by BMI category
dm_by_bmi_cat #print results
round(100*prop.table(dm_by_bmi_cat, margin = 1), digits = 1) #with row percentages
age <- data["age"]
age <- data["age"]
age_cat <- ifelse(age < 45, "Under 45",
ifelse(age >= 45 & age <= 64, "45-64",
ifelse(age >= 65 & age <= 74, "65-74",
ifelse(age >= 75, "75 and Over", NA))))
age_cat
age <- data["age"]
age_cat <- ifelse(age < 45, "Under 45",
ifelse(age >= 45 & age <= 64, "45-64",
ifelse(age >= 65 & age <= 74, "65-74",
ifelse(age >= 75, "75 and Over", NA))))
table(age_cat)
age <- data["age"]
age_cat <- ifelse(age < 45, "Under 45",
ifelse(age >= 45 & age <= 64, "45-64",
ifelse(age >= 65 & age <= 74, "65-74",
ifelse(age >= 75, "75 and Over", NA))))
table(age_cat, gender, exclude = NULL)
age <- data["age"]
age_cat <- ifelse(age < 45, "Under 45",
ifelse(age >= 45 & age <= 64, "45-64",
ifelse(age >= 65 & age <= 74, "65-74",
ifelse(age >= 75, "75 and Over", NA))))
age_by_gender <- table(age_cat, gender, exclude = NULL)
round(100*prop.table(age_by_gender), digits = 0)
table(age, exclude = NULL)
table(gender, exclude = NULL)
round(100*prop.table(age_by_gender, margin = 2), digits = 0)
round(100*prop.table(age_by_gender), digits = 0)
round(100*prop.table(age_by_gender), digits = 1)
glm(dm ~ 1, family = binomial (link = logit))
m <- glm(dm ~ 1, family = binomial (link = logit))
summary(m)
table(m$y)
m <- glm(dm ~ gender, family = binomial (link = logit))
summary(m)
m <- glm(dm ~ age, family = binomial (link = logit))
m <- glm(dm ~ age, family = binomial (link = logit))
age <- age
age <- str(age)
m <- glm(dm ~ age, family = binomial (link = logit))
age <- data["age"]
m <- glm(dm ~ age, family = binomial (link = logit))
age2 <- str(data$age)
m <- glm(dm ~ age2, family = binomial (link = logit))
age2 <- as.numeric(str(data$age))
age <- data[,"age"]
m <- glm(dm ~ age, family = binomial (link = logit))
summary(m)
dm_by_age <- table (age, dm) #create a cross tabulation of age and diabetes status
freq_table <- prop.table(dm_by_age, margin = 1) #output the frequencies of diabetes status by age
odds <- freq_table[,"yes"]/freq_table[,"no"] #calculate the odds of having diabetes
logodds <- log(odds) #calculate the log odds
plot(rownames(freq_table), logodds) #plot the ages found in the sample against the log odds of having diabetes
exp(-1.7047)
exp(0.052)
exp(0.0525)
contrasts(gender)
contrasts(gender)
levels(gender)
gender <- relevel(gender, ref = "male")
levels(gender)
gender <- relevel(gender, ref = "male")
levels(gender)
m< - glm(dm ~ gender, family = binomial (link = logit))
gender <- relevel(gender, ref = "male")
levels(gender)
m <- glm(dm ~ gender, family = binomial (link = logit))
gender <- relevel(gender, ref = "male")
levels(gender)
m <- glm(dm ~ gender, family = binomial (link = logit))
summary(m)
m$coefficients #see the model's coefficients
exp(m$coefficients) #produce the odds ratios for all coefficients
dm_by_location <- table(dm, location, exclude = NULL)
location <- as.factor(data[,"location"])
location <- data[,"location"]
dm_by_location <- table(dm, location, exclude = NULL)
dm_by_location
round(100*prop.table(dm_by_location, margin = 1), digits = 1)
round(100*prop.table(dm_by_location, margin = 2), digits = 1)
dm_by_location <- table(dm, location)
dm_by_location
round(100*prop.table(dm_by_location, margin = 2), digits = 1)
m <- glm(dm ~ location, family = binomial (link = logit))
summary(m)
exp(m$coefficients)
m <- glm(dm ~ location, family = binomial (link = logit))
summary(m)
exp(m$coefficients)
hist(age)
hist(age, breaks = 5) #you can include a breaks argument to specify the number of bins
hist(age, breaks = 3) #you can include a breaks argument to specify the number of bins
hist(age, breaks = 12) #you can include a breaks argument to specify the number of bins
d <- density(age)
plot(d, mail = "") #gives warnings but the “main” argument suppresses the ugly default title
d <- density(age)
plot(d, main = "") #gives warnings but the “main” argument suppresses the ugly default title
#BMI
dbmi <- density(bmi)
#chol
summary(chol)
#chol
summary(chol)
chol.no.na <- chol[is.na(chol) == 0]
d <- density(chol.no.na)
plot(d, main = "")
#HDL
HDL <- data["hdl"]
#HDL
HDL <- data[,"hdl"]
summary(HDL)
HDL.no.na <- HDL[is.na(HDL) == 0]
d <- density(HDL.no.na)
plot(d, main = "")
#BMI
summary(BMI)
hdl <- data[,"hdl"]
summary(hdl)
hdl.no.na <- hdl[is.na(hdl) == 0]
d <- density(hdl.no.na)
plot(d, main = "")
#BMI
summary(bmi)
bmi.no.na <- bmi[is.na(bmi) == 0]
d <- density(bmi.no.na)
plot(d, main = "")
?[]
?[
?"["
#gender
gender <- as.factor(data[,"gender"])
dm_by_gender <- table(gender, dm) #excluding the NA values because there are not many
dm_by_gender_prop <- prop.table(dm_by_gender, margin = 1)
dm_by_gender_prop
odds_gender <- dm_by_gender_prop[,"yes"]/dm_by_gender_prop[,"no"]
logodds_gender <- log(odds_gender)
dotchart(logodds_gender)
plot(as.factor(names(logodds_gender)), logodds_gender)
#we already coded age and dm_by_age earlier in this course
dm_by_age_prop <- prop.table(dm_by_age, margin = 1)
odds_age <- dm_by_age_prop[,"yes"]/dm_by_age_prop[,"no"]
dm_by_age <- table(age, dm)
dm_by_age_prop <- prop.table(dm_by_age, margin = 1)
odds_age <- dm_by_age_prop[,"yes"]/dm_by_age_prop[,"no"]
dm_by_age <- table(age, dm)
dm_by_age_prop <- prop.table(dm_by_age, margin = 1)
odds_age <- dm_by_age_prop[,"yes"]/dm_by_age_prop[,"no"]
logodds_age <- log(odds_age)
plot(rownames(dm_by_age_prop), logodds_age)
#next we will look at this by the age groups we made earlier in the course
dm_by_age_cat <- table(age_cat, dm)
dm_by_age_cat_prop <- prop.table(dm_by_age_cat, margin = 1)
odds_age_cat <- dm_by_age_cat_prop[,"yes"]/dm_by_age_cat_prop[,"no"]
logodds_age_cat <- log(odds_age_cat)
dotchart(logodds_age_cat)
install.packages("benchmarkme")
library(benchmarkme)
benchmark_std
res = benchmark_std(,,1)
plot(res)
res = benchmark_std()
plot(res)
get_datatable(res)
get_available_benchmarks()
library(installr)
library(installr)
installr()
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("usethis")
library(usethis)
use_git_config(user.name = "ahunn93 - Desktop", user.email = 'adamghunn@gmail.com')
usethis::git_default_branch_configure()
usethis::create_github_token()
gitcreds::gitcreds_set()
summary(chol)
chol.no.na <- chol[is.na(chol)==0]
d <- density(chol.no.na)
plot(d, main = "")
summary(chol)
chol.no.na <- chol[is.na(chol)==0]
d <- density(chol.no.na)
plot(d, main = "")
# define chol as a continuous variable
chol <- g[,"chol"]
# define the age variable (continuous)
age <- age <- g[,"age"]
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
exp(confint(m))
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
exp(confint(m))
exp(confint.default(m))
m <- glm(dm ~ age + gender + bmi, family=binomial (link=logit))
summary(m)
exp(confint(m))
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
chol <- data["chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
chol <- data["chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol.no.na + insurance, family = binomial(link = logit))
chol <- data["chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
chol <- data["chol"]
chol <- data[,"chol"]
chol <- data[,"chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
insurance <- data["insurance"]
chol <- data[,"chol"] # use the ',' to mark as continuous
insurance <- data["insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
chol <- data[,"chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
chol <- data[,"chol"]
insurance <- data[,"insurance"]
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
exp(m$coefficients)
chol <- data[,"chol"]
insurance <- as.factor(data[,"insurance"])
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
exp(m$coefficients)
chol <- data[,"chol"]
insurance <- as.factor(data[,"insurance"])
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
exp(m$coefficients)
exp(confint(m))
chol <- data[,"chol"]
insurance <- as.factor(data[,"insurance"])
m <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
summary(m)
exp(m$coefficients)
exp(confint(m))
install.packages("DescTools")
require(DescTools)
install.packages("ResourceSelection")
require(ResourceSelection)
install.packages("generalhoslem")
require(generalhoslem)
# design your logistic regression
full_model <- glm(dm ~ age + chol + insurance, family = binomial(link = logit))
# analyse table of deviance
anova(full_model, test = "Chisq")
dm <- as.factor(data[,"dm"])
insurance <- as.factor(data[,"insurance"])
fh <- as.factor(data[,"fh"]) # 1=FH, 0=no FH
smoking <- as.factor(data[,"smoking"]) # 1,2,3
chol <- data[,'chol']
hdl <- data[,'hdl']
ratio <- data[,'ratio']
location <- as.factor(data[,'location'])
age <- data[,'age']
gender <- as.factor(data[,'gender'])
frame <- as.factor(data[,'frame'])
systolic <- data[,'bp.1s']
diastolic <- data[,'bp.1d']
model <- glm(dm ~ age + bmi + chol + hdl + systolic + diastolic, family = binomial(link = logit))
summary(model)
anova(model, test = "Chisq")
dm <- as.factor(data[,"dm"])
insurance <- as.factor(data[,"insurance"])
fh <- as.factor(data[,"fh"]) # 1=FH, 0=no FH
smoking <- as.factor(data[,"smoking"]) # 1,2,3
chol <- data[,'chol']
hdl <- data[,'hdl']
ratio <- data[,'ratio']
location <- as.factor(data[,'location'])
age <- data[,'age']
gender <- as.factor(data[,'gender'])
frame <- as.factor(data[,'frame'])
systolic <- data[,'bp.1s']
diastolic <- data[,'bp.1d']
model <- glm(dm ~ age + bmi + chol + hdl + systolic + diastolic, family = binomial(link = logit))
summary(model)
anova(model, test = "Chisq")
model2 <- glm(dm ~ age + bmi + chol + hdl, family = binomial(link = logit))
summary(model2)
anova(model2, test = "Chisq")
model3 <- glm(dm ~ age + bmi + chol + hdl + systolic + diastolic + gender + location + frame + insurance + smoking, family = binomial(link=logit))
summary(model3)
